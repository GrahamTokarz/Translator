#List of input words that are singular
nonplurals = [
	'hi',
	'yes',
	'no',
	'homework',
	'glasses',
	'zoe',
	'callum',
	'fahrenheit',
	'fun',
	'math',
	'wisdom',
	'ready',
	'whatever',
	'what',
	'why',
	'braces',
	'be',
	'algebra',
	'nature',
	'multiply',
	'add',
	'neglected',
	'animals',
	'pi',
	'before',
	'girls',
	'boys',
	'socks',
	'new',
	'die',
	'to',
	'cool',
	'bye',
	'christian',
	'dreams',
	'hungry',
	'eat',
	'this',
	'that',
	'yay',
	'celsius',
	'friends',
	'alise',
	'kelvin',
	'sleep',
	'lelaila',
	'funny',
	'hailey',
	'cars',
	'wings',
	'has',
	'happened',
	'happen',
	'going',
	'go',
	'shut',
	'swedish',
	'lindsey',
	'drums',
	'let',
	'how',
	'a',
	'striped',
	'help',
	'eyes',
	'they',
	'them',
	'at',
	'we',
	'creatures',
	'instruments',
	'first',
	'our',
	'of',
	'are',
	'is',
	'people',
	'imani',
	'would',
	"wouldn't",
	'clothes',
	'jared',
	'superheroes',
	'am',
	'athena',
	'poseidon',
	'zeus',
	'down',
	'have',
	'having',
	'did',
	'up',
	'will',
	'graham',
	'distract',
	'around',
	'on',
	'over',
	'english',
	'stupid',
	'air',
	'work',
	'dots',
	'all',
	'awesome',
	'but',
	'words',
	'there',
	'samantha',
	'hoover',
	'please',
	'play',
	'random',
	'ratchet',
	'abby',
	'briana',
	'hate',
	'aubrie',
	'chloe',
	'love',
	"love's",
	'thor',
	'bad',
	'not',
	'kayla',
	'so',
	'amelia',
	'selfish',
	'say',
	'speaks',
	'speak',
	'chopsticks',
	'stab',
	'took',
	'take',
	'maybe',
	'divide',
	'kaitlyn',
	'do',
	'doing',
	"don't",
	'degrees',
	'and',
	'subtract',
	'ever',
	'every',
	'everything',
	'i',
	'dark',
	"i'm",
	'it',
	'you',
	"you'll",
	'your',
	'us',
	'iron',
	'my',
	'me',
	'latin',
	'not',
	'him',
	'he',
	'hers',
	'his',
	'who',
	'deadified',
	'when',
	'here',
	'where',
	'ok',
	'her',
	'she',
	'noodles',
	'nice',
	'good',
	'jonathan',
	'shoes',
	'the'
]

#List of corresponding translations
trans = {
	"hi": "chichi",
	"yes": "yiw",
	"no": "shu",
	'homework': 'abeloing',
	"glasses": "afablacblacs",
	"zoe": 'Agcha',
	"callum": 'Akeyla',
	'fahrenheit': 'ameritho',
	'fun': 'ampianch',
	'math': 'amsd',
	'wisdom': 'anstoni',
	'ready': 'arikerner',
	'whatever': 'avalet',
	'what': 'avalya',
	'why': 'avawicha',
	'braces': 'awchetathhart',
	'be': 'ba',
	'algebra': 'bakinolp',
	'nature': 'balmikeke',
	'multiply': 'bintwikipi',
	'add': 'bintwinepa',
	'neglected': 'brazen',
	'animals': 'bucsh',
	'pi': 'cekucap',
	'before': 'cerglegh',
	'girls': 'chaina',
	'boys': 'chaino',
	'socks': 'chapuhs',
	'new': 'chaver',
	'die': 'chickling',
	'to': 'chih',
	'cool': 'chrukme',
	'bye': 'chochu',
	'christian': 'conprecha',
	'dreams': 'dohaka',
	'hungry': 'dooble',
	'eat': 'dooble',
	'this': 'dubletta',
	'that': 'dublotti',
	'yay': 'erei',
	'celsius': 'eveetho',
	'friends': 'FAVANS',
	'alise': 'Flacha',
	'kelvin': 'fooshtho',
	'sleep': 'gobof',
	'lelaila': 'grumfeha',
	'funny': 'hahah',
	'hailey': 'Hala',
	'cars': 'hebacky',
	'wings': 'ichamachafli',
	'has': 'ikikiko',
	'happened': 'imlantomena',
	'happen': 'imlantomena',
	'going': 'insayanop',
	'go': 'insyanch',
	'shut': 'isamana',
	'swedish': 'Jagaterapplerato',
	'lindsey': 'Jama',
	'drums': 'kabuntunk',
	'let': 'keeh',
	'how': 'kiwato',
	'a': 'la',
	'striped': 'lakabacktaknak',
	'help': 'lamonchank',
	'eyes': 'lampanicha',
	'they': 'lanchiapada',
	'them': 'lanchiapanchem',
	'at': 'lata',
	'we': 'le',
	'creatures': 'limvin',
	'instruments': 'linsnopoll',
	'first': 'linstanckite',
	'our': 'loah',
	'of': 'louta',
	'are': 'lu',
	'is': 'lulhoo',
	'people': 'lulihs',
	'imani': 'Lynncha',
	'would': 'macooh',
	"wouldn't": 'macoohuko',
	'clothes': 'mapituhs',
	'jared': 'Meldaver',
	'superheroes': 'mevedeca',
	'am': 'mikal',
	'athena': 'Mikuntraanstoni',
	'poseidon': 'Mikuntrapuntra',
	'zeus': 'Mikuntrawihswi',
	'down': 'militach',
	'have': 'mitioli',
	'having': 'mitiolinop',
	'did': 'mitoch',
	'up': 'moltachi',
	'will': 'mooch',
	'graham': 'Muchacha',
	'distract': 'noeintaanch',
	'around': 'noepan',
	'on': 'noepanch',
	'over': 'noeplint',
	'english': 'nomaliti',
	'stupid': 'nonstani',
	'air': 'norlinp',
	'work': 'oing',
	'dots': 'onratica',
	'all': 'oovlet',
	'awesome': 'ouyouyash',
	'but': 'ich',
	'words': 'paglhs',
	'there': 'palinta',
	'samantha': 'Piatocha',
	'hoover': 'Pitcapt',
	'please': 'pleep',
	'play': 'plong',
	'random': 'pochezcak',
	'ratchet': 'racachaka',
	'abby': 'Rapadacha',
	'briana': 'Rascha',
	'hate': 'regh',
	'aubrie': 'Sasscha',
	'chloe': 'Sebecha',
	'love': 'sha',
	"love's": 'shaoo',
	'thor': 'Shing',
	'bad': 'shuh',
	'not': 'shukos',
	'kayla': 'Smucha',
	'so': 'snark',
	'amelia': 'Snoplitana',
	'selfish': 'sopie',
	'say': 'spalgh',
	'speaks': 'spalgh',
	'speak': 'spalgh',
	'chopsticks': 'stehe',
	'stab': 'stanglonp',
	'took': 'stwin',
	'take': 'stwon',
	'maybe': 'talole',
	'divide': 'tconepo',
	'kaitlyn': 'Thacha',
	'do': 'ticoch',
	'doing': 'ticochnop',
	"don't": 'ticochuko',
	'degrees': 'tinaciki',
	'and': 'tuta',
	'subtract': 'twineekipa',
	'ever': 'uvlet',
	'every': 'uvlet',
	'everything': 'uvletcha',
	'i': 'va',
	'dark': 'vakina',
	"i'm": 'vami',
	'it': 'vi',
	'you': 'vie',
	"you'll": 'vieoh',
	'your': 'vivah',
	'us': 'vo',
	'iron': 'voosh',
	'my': 'vovah',
	'me': 'vu',
	'latin': 'Waesrd',
	'not': 'wah',
	'him': 'wahcha',
	'he': 'wahcha',
	'hers': 'wahchaah',
	'his': 'wahchaoh',
	'who': 'wakito',
	'deadified': 'walisde',
	'when': 'whaach',
	'here': 'whioch',
	'where': 'whooch',
	'ok': 'wimtablantoke',
	'her': 'wohcha',
	'she': 'wohcha',
	'noodles': 'yamiron',
	'nice': 'yishuw',
	'good': 'yiwoo',
	'jonathan': 'Yowalver',
	'shoes': 'zapituhs',
	'the': 'ze'
}

#Checks if the input word is a singular
def check(word):
	if (nonplurals.count(word) == 1):
		return "true"
	else:
		return "false"

#Checks if the input word is a signular with a corresponding English word, considering capitalization
def sCheck(word):
	if(word in trans.values()):
		return "true"
	else:
		if(word.lower() in trans.values()):
			return "trueLower"
		else:
			return "false"

#Returns the English equivalent to the input word
def sTrans(word):
	return trans.keys()[trans.values().index(word)]

#Returns the Spangley equivalent to the input word
def translate(word):
	return trans[word]

#Returns the number of singular translation rules present
def wordcount():
	return len(nonplurals)